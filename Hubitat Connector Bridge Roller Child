//Ver4.1



metadata {
    definition(name: "Connector Bridge Roller Child", namespace: "Connector", author: "ScubaMikeJax904", 
               importUrl: "https://raw.githubusercontent.com/scubamikejax904/Connector-Hubitat-Relay/refs/heads/main/Hubitat%20Connector%20Bridge%20Roller%20Child" )
    {
        capability "WindowShade"
        capability "Switch"
        capability "SwitchLevel"
        capability "Battery"
        capability "Refresh"

        command "stop"

        attribute "rssi", "number"
        attribute "online", "string"
        attribute "lastUpdate", "string"
    }
}

// ------------------- Capability Commands -------------------
def open() {
    parent.sendOpenCommand(device.deviceNetworkId)
    sendEvent(name: "windowShade", value: "opening")
    sendEvent(name: "switch", value: "on")
}

def close() {
    parent.sendCloseCommand(device.deviceNetworkId)
    sendEvent(name: "windowShade", value: "closing")
    sendEvent(name: "switch", value: "off")
}

def stop() {
    parent.sendStopCommand(device.deviceNetworkId)
    sendEvent(name: "windowShade", value: "partially open")
}

def setLevel(level) {
    level = Math.max(Math.min(level as int, 100), 0)
    parent.sendTargetCommand(device.deviceNetworkId, level)
    sendEvent(name: "level", value: level)

    if (level == 0) {
        sendEvent(name: "windowShade", value: "open")
        sendEvent(name: "switch", value: "on")
    } else if (level == 100) {
        sendEvent(name: "windowShade", value: "closed")
        sendEvent(name: "switch", value: "off")
    } else {
        sendEvent(name: "windowShade", value: "partially open")
        sendEvent(name: "switch", value: "on")
    }
}

// Alias for Hubitat setPosition
def setPosition(pos) {
    setLevel(pos as int)
}

def refresh() {
    parent.requestStatus(device.deviceNetworkId)
}

// ------------------- State Updates from Parent -------------------
def updateStateFromParent(deviceData) {
    // The data is passed directly from the parent, not wrapped in a "data" field
    log.debug "Processing device data for ${device.displayName}: ${deviceData}"
    
    if(!deviceData) {
        log.warn "No device data received for ${device.displayName}"
        return
    }
    
    // Handle current position (0-100)
    if(deviceData.currentPosition != null) {
        def position = deviceData.currentPosition as int
        log.debug "Found currentPosition: ${position} for ${device.displayName}"
        
        sendEvent(name: "level", value: position)

        if(position == 0) {
            sendEvent(name: "windowShade", value: "open")
            sendEvent(name: "switch", value: "on")
        } else if(position == 100) {
            sendEvent(name: "windowShade", value: "closed")
            sendEvent(name: "switch", value: "off")
        } else {
            sendEvent(name: "windowShade", value: "partially open")
            sendEvent(name: "switch", value: "on")
        }
    }

    // Handle operation status: 0=close, 1=open, 2=stop
    if(deviceData.operation != null) {
        log.debug "Found operation: ${deviceData.operation} for ${device.displayName}"
        switch(deviceData.operation as int) {
            case 0: 
                sendEvent(name: "windowShade", value: "closing")
                break
            case 1: 
                sendEvent(name: "windowShade", value: "opening")
                break
            case 2: 
                sendEvent(name: "windowShade", value: "partially open")
                break
        }
    }

    // Handle current state (this might be useful for additional status)
    if(deviceData.currentState != null) {
        log.debug "Found currentState: ${deviceData.currentState} for ${device.displayName}"
        // You might want to map currentState values to windowShade states
        // Based on your data, currentState:3 might mean "stopped" or "idle"
    }

    // Handle battery level
    if(deviceData.batteryLevel != null) {
        def batteryLevel = deviceData.batteryLevel as int
        sendEvent(name: "battery", value: batteryLevel)
        log.debug "Found battery: ${batteryLevel}% for ${device.displayName}"
    }
    
    // Handle RSSI
    if(deviceData.RSSI != null) {
        sendEvent(name: "rssi", value: deviceData.RSSI as int)
        log.debug "Found RSSI: ${deviceData.RSSI} dBm for ${device.displayName}"
    }

    // Update timestamps and online status
    sendEvent(name: "lastUpdate", value: new Date().format("yyyy-MM-dd HH:mm:ss", location.timeZone))
    sendEvent(name: "online", value: "online")
}

def markOffline() {
    sendEvent(name: "online", value: "offline")
}
