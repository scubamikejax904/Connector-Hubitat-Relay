//Ver4.0

metadata {
    definition(name: "Connector Bridge Roller Child", namespace: "Connector", author: "ScubaMikeJax904") {
        capability "WindowShade"
        capability "Switch"
        capability "SwitchLevel"
        capability "Battery"
        capability "Refresh"

        command "stop"

        attribute "rssi", "number"
        attribute "online", "string"
        attribute "lastUpdate", "string"
    }
}

// ------------------- Capability Commands -------------------
def open() {
    parent.sendOpenCommand(device.deviceNetworkId)
    sendEvent(name: "windowShade", value: "opening")
    sendEvent(name: "switch", value: "on")
}

def close() {
    parent.sendCloseCommand(device.deviceNetworkId)
    sendEvent(name: "windowShade", value: "closing")
    sendEvent(name: "switch", value: "off")
}

def stop() {
    parent.sendStopCommand(device.deviceNetworkId)
    sendEvent(name: "windowShade", value: "partially open")
}

def setLevel(level) {
    level = Math.max(Math.min(level as int, 100), 0)
    parent.sendTargetCommand(device.deviceNetworkId, level)
    sendEvent(name: "level", value: level)

    if (level == 0) {
        sendEvent(name: "windowShade", value: "open")
        sendEvent(name: "switch", value: "on")
    } else if (level == 100) {
        sendEvent(name: "windowShade", value: "closed")
        sendEvent(name: "switch", value: "off")
    } else {
        sendEvent(name: "windowShade", value: "partially open")
        sendEvent(name: "switch", value: "on")
    }
}

// Alias for Hubitat setPosition
def setPosition(pos) {
    setLevel(pos as int)
}

def refresh() {
    parent.requestStatus(device.deviceNetworkId)
}

// ------------------- State Updates from Parent -------------------
def updateStateFromParent(responseData) {
    if(!responseData?.data) return
    
    def data = responseData.data
    
    // Handle current position
    if(data.currentPosition != null) {
        def pos = data.currentPosition as int
        sendEvent(name: "level", value: pos)

        if(pos == 0) {
            sendEvent(name: "windowShade", value: "open")
            sendEvent(name: "switch", value: "on")
        } else if(pos == 100) {
            sendEvent(name: "windowShade", value: "closed")
            sendEvent(name: "switch", value: "off")
        } else {
            sendEvent(name: "windowShade", value: "partially open")
            sendEvent(name: "switch", value: "on")
        }
    }
    
    // Handle target position (if different from current)
    if(data.targetPosition != null && data.currentPosition == null) {
        def pos = data.targetPosition as int
        sendEvent(name: "level", value: pos)

        if(pos == 0) {
            sendEvent(name: "windowShade", value: "opening")
            sendEvent(name: "switch", value: "on")
        } else if(pos == 100) {
            sendEvent(name: "windowShade", value: "closing")
            sendEvent(name: "switch", value: "off")
        } else {
            sendEvent(name: "windowShade", value: "partially open")
            sendEvent(name: "switch", value: "on")
        }
    }

    // Handle operation status: 0=close, 1=open, 2=stop
    if(data.operation != null) {
        switch(data.operation as int) {
            case 0: 
                sendEvent(name: "windowShade", value: "closing")
                break
            case 1: 
                sendEvent(name: "windowShade", value: "opening")
                break
            case 2: 
                sendEvent(name: "windowShade", value: "partially open")
                break
        }
    }

    // Handle battery level
    if(data.batteryLevel != null) {
        sendEvent(name: "battery", value: data.batteryLevel as int)
    }
    
    // Handle RSSI if available
    if(data.rssi != null) {
        sendEvent(name: "rssi", value: data.rssi as int)
    } else if(data.raw?.RSSI != null) {
        sendEvent(name: "rssi", value: data.raw.RSSI as int)
    }

    // Update timestamps and online status
    sendEvent(name: "lastUpdate", value: new Date().format("yyyy-MM-dd HH:mm:ss", location.timeZone))
    sendEvent(name: "online", value: "online")
}

def markOffline() {
    sendEvent(name: "online", value: "offline")
}
